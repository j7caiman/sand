#!/usr/bin/env node
var debug = require('debug')('sand');
var app = require('./app');

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function () {
	debug('Express server listening on port ' + server.address().port);
});
var io = require('socket.io')(server);
var processFootprint = require("./server/process_footprint");

var connectedClients = {};
io.on('connection', function (socket) {
	var currentPlayers = [];
	for(var socketId in connectedClients) {
		if(connectedClients.hasOwnProperty(socketId)) {
			var playerData = connectedClients[socketId];
			currentPlayers.push(playerData);
		}
	}
	socket.emit('onConnect', currentPlayers);

	socket.on('playerData', function (playerData) {
		connectedClients[socket.id] = playerData;
		socket.broadcast.emit('playerData', playerData);
	});

	socket.on('footprint', function (footprintData) {
		socket.broadcast.emit('footprint', footprintData);

		processFootprint(footprintData);
	});

	socket.on('disconnect', function() {
		// if the server is restarted while clients are connected, connectedClients will be empty and
		// a client who disconnects will cause this exception
		if(connectedClients[socket.id] !== undefined) {
			io.emit('playerDisconnected', connectedClients[socket.id].uuid);
			delete connectedClients[socket.id];
		}
	});
});
